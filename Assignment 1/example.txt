{ "nbformat": 4, "nbformat_minor": 0, "metadata": { "colab": { "provenance": [] }, "kernelspec": { "name": "python3", "display_name": "Python 3" }, "language_info": { "name": "python" } }, "cells": [ { "cell_type": "markdown", "source": [ "# Clustering with k-means" ], "metadata": { "id": "gRVIER2Lpvxd" } }, { "cell_type": "code", "execution_count": null, "metadata": { "id": "npGzzUwBQS0l" }, "outputs": [], "source": [ "from google.colab import drive\n", "import pandas as pd\n", "from sklearn.preprocessing import MinMaxScaler\n", "from sklearn.cluster import KMeans\n", "import matplotlib.pyplot as plt\n", "from pandas.plotting import parallel_coordinates\n", "import seaborn as sns" ] }, { "cell_type": "code", "source": [ "drive.mount('/content/drive')" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/" }, "id": "_HxKcozZQvqk", "outputId": "c3d53864-660d-40a1-f023-e19a6e8e976b" }, "execution_count": null, "outputs": [ { "output_type": "stream", "name": "stdout", "text": [ "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n" ] } ] }, { "cell_type": "markdown", "source": [ "We will use a very simple dataset with a company customers data." ], "metadata": { "id": "6fEr3yMip9Vr" } }, { "cell_type": "code", "source": [ "df = pd.read_csv('/content/drive/My Drive/IAAE/data/Customers.csv')" ], "metadata": { "id": "_5pPc2tbQdQs" }, "execution_count": null, "outputs": [] }, { "cell_type": "code", "source": [ "df" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/", "height": 423 }, "id": "x02wkp0sQ86A", "outputId": "d431641a-3a6f-40a6-bbbb-bd89ac1df79d" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ " Age Annual_Income Spending_Score\n", "0 19 15 39\n", "1 21 15 81\n", "2 20 16 6\n", "3 23 16 77\n", "4 31 17 40\n", ".. ... ... ...\n", "195 35 120 79\n", "196 45 126 28\n", "197 32 126 74\n", "198 32 137 18\n", "199 30 137 83\n", "\n", "[200 rows x 3 columns]" ], "text/html": [ "\n", "
\n", "
\n", "
\n", "\n", "\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "

\n", "
\n", " \n", " \n", " \n", "\n", " \n", " \n", "\n", " \n", "
\n", "
\n", " " ] }, "metadata": {}, "execution_count": 4 } ] }, { "cell_type": "code", "source": [ "df.info()" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/" }, "id": "wkoO4TwiQfB0", "outputId": "70e80805-e705-445f-d7ea-61150e3b77f0" }, "execution_count": null, "outputs": [ { "output_type": "stream", "name": "stdout", "text": [ "\n", "RangeIndex: 200 entries, 0 to 199\n", "Data columns (total 3 columns):\n", " # Column Non-Null Count Dtype\n", "--- ------ -------------- -----\n", " 0 Age 200 non-null int64\n", " 1 Annual_Income 200 non-null int64\n", " 2 Spending_Score 200 non-null int64\n", "dtypes: int64(3)\n", "memory usage: 4.8 KB\n" ] } ] }, { "cell_type": "markdown", "source": [ "Since k-means is a distance-based algorithm, we must scale the data first." ], "metadata": { "id": "kKpr4JA4qHEz" } }, { "cell_type": "code", "source": [ "scaler = MinMaxScaler()\n", "scaler.fit(df)\n", "df_array = scaler.transform(df)\n", "df_sc = pd.DataFrame(df_array,columns=df.columns,index=df.index)" ], "metadata": { "id": "B1XDXXKFRiXH" }, "execution_count": null, "outputs": [] }, { "cell_type": "markdown", "source": [ "## k-means with fixed k\n", "\n", "\n", "\n" ], "metadata": { "id": "UXDvIVKFSZy5" } }, { "cell_type": "markdown", "source": [ "Create a model with k-means using k=4 as an example. Since k-means is dependent on the random initialization of the first centroids we set `random_state` to guarantee that this does not change between runs.\n", "\n", "First, create an instance of the KMeans object, then fit the model to the data.\n" ], "metadata": { "id": "JobstWVtRQvT" } }, { "cell_type": "code", "source": [ "km_model = KMeans(n_clusters=4,random_state=3)\n", "km_model.fit(df_sc)" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/" }, "id": "2IrJ6tHdSm7s", "outputId": "1de85e55-1cd8-463a-c8a6-a1f6b1cb9660" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ "KMeans(n_clusters=4, random_state=3)" ] }, "metadata": {}, "execution_count": 7 } ] }, { "cell_type": "markdown", "source": [ "We can obtain the cluster centroids for each cluster with the `cluster_centers_` attribute. It returns an array, we convert it to a dataframe using the original column names so that it is easy to display." ], "metadata": { "id": "HrFrmQSqSTg7" } }, { "cell_type": "code", "source": [ "centers = pd.DataFrame(km_model.cluster_centers_,columns=df_sc.columns)" ], "metadata": { "id": "cSryJuH7S7iA" }, "execution_count": null, "outputs": [] }, { "cell_type": "code", "source": [ "centers" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/", "height": 175 }, "id": "_xbLSDd3TKiK", "outputId": "4f107ea5-70da-4ec3-b092-1920412aae33" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ " Age Annual_Income Spending_Score\n", "0 0.410931 0.586066 0.189581\n", "1 0.286058 0.582787 0.821684\n", "2 0.692012 0.268096 0.397645\n", "3 0.143050 0.204918 0.605084" ], "text/html": [ "\n", "
\n", "
\n", "
\n", "\n", "\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "
\n", "
\n", " \n", " \n", " \n", "\n", " \n", " \n", "\n", " \n", "
\n", "
\n", " " ] }, "metadata": {}, "execution_count": 9 } ] }, { "cell_type": "markdown", "source": [ "Remember that the data is scaled. We can improve interpretation by \"undoing\" the scaling using `inverse_transform`. In order to compute the inverse of an scaling the data used must include exactly the same columns that the original data.\n", "\n", "Again, the result is an array that we convert to a dataframe that has the same columns that the original centers and also the same indexes (the indexes are actually the clusters)." ], "metadata": { "id": "VbZVeQyITeRu" } }, { "cell_type": "code", "source": [ "centers_unscaled = pd.DataFrame(scaler.inverse_transform(centers),index=centers.index,columns=centers.columns)\n", "centers_unscaled" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/", "height": 175 }, "id": "nwPU-q2tUbhi", "outputId": "57ba8c49-21a2-4599-fff5-b8c4b17d7856" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ " Age Annual_Income Spending_Score\n", "0 39.368421 86.500000 19.578947\n", "1 32.875000 86.100000 81.525000\n", "2 53.984615 47.707692 39.969231\n", "3 25.438596 40.000000 60.298246" ], "text/html": [ "\n", "
\n", "
\n", "
\n", "\n", "\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "
\n", "
\n", " \n", " \n", " \n", "\n", " \n", " \n", "\n", " \n", "
\n", "
\n", " " ] }, "metadata": {}, "execution_count": 10 } ] }, { "cell_type": "markdown", "source": [ "We can add the cluster labels to the original data, if needed." ], "metadata": { "id": "ck5-XhIyqkW8" } }, { "cell_type": "code", "source": [ "df_cluster = df_sc.copy()\n", "df_cluster['cluster'] = km_model.labels_" ], "metadata": { "id": "lrKEuBzXduQG" }, "execution_count": null, "outputs": [] }, { "cell_type": "code", "source": [ "df_cluster" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/", "height": 423 }, "id": "4NgGFMyleGuG", "outputId": "382995b6-de51-4d6e-d880-ef74c7cb466b" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ " Age Annual_Income Spending_Score cluster\n", "0 0.019231 0.000000 0.387755 3\n", "1 0.057692 0.000000 0.816327 3\n", "2 0.038462 0.008197 0.051020 3\n", "3 0.096154 0.008197 0.775510 3\n", "4 0.250000 0.016393 0.397959 3\n", ".. ... ... ... ...\n", "195 0.326923 0.860656 0.795918 1\n", "196 0.519231 0.909836 0.275510 0\n", "197 0.269231 0.909836 0.744898 1\n", "198 0.269231 1.000000 0.173469 0\n", "199 0.230769 1.000000 0.836735 1\n", "\n", "[200 rows x 4 columns]" ], "text/html": [ "\n", "
\n", "
\n", "
\n", "\n", "\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "


\n", "
\n", " \n", " \n", " \n", "\n", " \n", " \n", "\n", " \n", "
\n", "
\n", " " ] }, "metadata": {}, "execution_count": 12 } ] }, { "cell_type": "markdown", "source": [ "Now, it is easy to obtain the number of examples in each cluster." ], "metadata": { "id": "xMbb7ghkqrKO" } }, { "cell_type": "code", "source": [ "df_cluster['cluster'].value_counts()" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/" }, "id": "kq3PY20BeMWC", "outputId": "7ad449ad-b3ce-43b4-c6fc-d0083dc55f84" }, "execution_count": null, "outputs": [ { "output_type": "execute_result", "data": { "text/plain": [ "2 65\n", "3 57\n", "1 40\n", "0 38\n", "Name: cluster, dtype: int64" ] }, "metadata": {}, "execution_count": 13 } ] }, { "cell_type": "markdown", "source": [ "## How to find the best number of clusters with the \"elbow\" method" ], "metadata": { "id": "jFyg02zIsPwF" } }, { "cell_type": "markdown", "source": [ "In `sklearn`, a k-means model includes an attribute that contains the Sum of Squared Errors (SSE), i.e., the sum of squared distances between each example and its centroid. This attribute is called `inertia_`.\n", "\n", "We build a model for each possible value of k and compute the inertia." ], "metadata": { "id": "fgkaQy_0VPoZ" } }, { "cell_type": "code", "source": [ "sse = []\n", "for i in range(2, 11): \n", " km = KMeans(n_clusters=i,random_state=0) \n", " km.fit(df_sc) \n", " sse.append(km.inertia_)" ], "metadata": { "id": "dQvX-dohWyat" }, "execution_count": null, "outputs": [] }, { "cell_type": "markdown", "source": [ "We plot the values and select k at the \"elbow\", i.e, the point in which the inertia starts decreasing in a (almost) linear fashion.\n", "\n", "We plot also a straigth line to help select the \"elbow\" visually.\n", "\n", "In practice, we can select several values of k around the elbow and explore the results." ], "metadata": { "id": "i-xeQ12SWTLG" } }, { "cell_type": "code", "source": [ "sns.lineplot(x=range(2,11),y=sse,marker='o');\n", "plt.xlabel('Number of clusters') \n", "plt.ylabel('Sum of Squares Within');\n", "\n", "xpoints = [10,2]\n", "ypoints = [sse[-1],sse[0]]\n", "sns.lineplot(xpoints,ypoints);" ], "metadata": { "colab": { "base_uri": "https://localhost:8080/", "height": 335 }, "id": "GItnGho2VLy7", "outputId": "06845003-b276-43b9-838c-94e2d9c6b77f" }, "execution_count": null, "outputs": [ { "output_type": "stream", "name": "stderr", "text": [ "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n", " FutureWarning\n" ] }, { "output_type": "display_data", "data": { "text/plain": [ "
" ], "image/png": "\n" }, "metadata": { "needs_background": "light" } } ] }, { "cell_type": "markdown", "source": [ "## Suggestions for the assignment" ], "metadata": { "id": "fTf0T2RheoGj" } }, { "cell_type": "markdown", "source": [ "These are some suggestions about topics, methods or procedures that you can apply in your assignment:\n", "\n", "* Use a parallel coordinates plot to visualize the differences between the centers of each cluster.\n", "* Compute the standard deviation of the values in the centers for each variable. If a variable has a very different value between the centers, the std should be high, if most of the centers have the same value, it should be low.\n", "* Choose different pairs of variables and make a scatter plot using colors to mark the clusters.\n", "* Look at https://scikit-learn.org/stable/modules/clustering.html#clustering-performance-evaluation for evaluation metrics that do not require knowledge of the original classes in the data. Check if the results are the same as inertia for different k values.\n", "* Compare the histograms for a single variable among the different clusters.\n", "* Using the `transform` method of the k-means model we can obtain the distance of each example to every center. We can use this information to locate extreme points very far from the center or points that are very close to more than one center.\n", "* Add the assigned clusters to the original dataset, compute PCA and plot the two first components using different colors for the clusters.\n", "* The yellowbrick library offers some nice visualizers: https://www.scikit-yb.org/en/latest/api/cluster/index.html\n", "\n" ], "metadata": { "id": "HZo2C6zsesvO" } } ] }